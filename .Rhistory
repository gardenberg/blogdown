theme(axis.text.x = element_text(angle = 90, hjust = 1))
?theme_set
theme_set(theme_minimal())
#litt databearbeiding først
#her er vi interessert i alle fylkeskommunene og gjennomsnittet for landet uten Oslo,
#vi vil også ha maks tre kategorier,
#og sortert slik (via factor-levels) at videregående kommer nederst
#regionene skal være sortert etter størrelsen på budsjettet til vgs
#litt usikker på hvordan fct_reorder2 får til det, men det virker
temp <- filter(df, grepl("fylkeskommune",region)|region=="Landet uten Oslo")%>%
mutate(.,
funksjon_summert = ifelse(funksjon %in% c("Videregående opplæring samlet","Samferdsel, fylkeskommune"), funksjon, "Andre"),
funksjon_summert = factor(funksjon_summert,levels=c("Andre","Samferdsel, fylkeskommune","Videregående opplæring samlet")),
region = str_replace(region,fixed("fylkeskommune"),replacement=" ")
)%>%
group_by(.,region,funksjon_summert)%>%
summarise(.,andel = sum(value))%>%
ungroup()%>%
mutate(.,region = fct_reorder2(region,as.numeric(funksjon_summert),andel))
ggplot(data=temp)+
geom_col(aes(x=region,y=andel,fill=funksjon_summert),position="fill") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(httr)
library(jsonlite)
library(dplyr)
library(knitr)
library(here)
?here
source(here("content/scripts/imdi_api_function.R"))
url = "https://imdifakta.azurewebsites.net/api/v1/metadata/tables"
test_tabeller = GET(url)
df = data.frame(datasett = fromJSON(content(test_tabeller,"text",encoding="UTF-8")))
kable(df)
View(df)
url = "https://imdifakta.azurewebsites.net/api/v1/metadata/headers/befolkning_alder"
test_tabeller = GET(url)
df = fromJSON(content(test_tabeller,"text",encoding="UTF-8"))
kable(df$headers)
View(df)
df$headers
url = "https://imdifakta.azurewebsites.net/api/v1/metadata/headergroups/befolkning_alder"
test_tabeller = GET(url)
df = fromJSON(content(test_tabeller,"text",encoding="UTF-8"))
str(df)
#henter data fra query-api
url = "https://imdifakta.azurewebsites.net/api/v1/data/query"
data =
'{"TableName":"befolkning_hovedgruppe",
"Include":
["innvkat5","kjonn","fylkeNr","enhet","aar"],
"Conditions":
{"innvkat5":["innvandrere","bef_u_innv_og_norskf","norskfodte_m_innvf"],
"kjonn":["alle"],
"fylkeNr":["00"],
"enhet":["personer"]
}
}'
#ma ha med content_type_json() for a fa 200 ok
test = POST(url,body=data,encode="json",verbose(),content_type_json())
df = fromJSON(content(test,"text",encoding="UTF-8"))[[1]]
head(df)
imdi_fetch_example = function(data){
temp_queryresult = POST("https://imdifakta.azurewebsites.net/api/v1/data/query",body=data,encode="json",verbose(),content_type_json())
temp_df = fromJSON(content(temp_queryresult,"text",encoding="UTF-8"))
if(length(temp_df)==1){
return(temp_df[[1]])
}
if(length(temp_df)>1){
temp_df_final = data.frame()
temp_df_final = bind_rows(temp_df_final,temp_df[[2]])
i = 0
}
#bruker en while-loop, og det er vel fy?
while(length(temp_df)>1){
i = i+1
temp_token = temp_df$continuation
temp_token_format = paste0('{','"continuation":"',temp_token,'",')
new_data = substring(data,2,nchar(data)+1)
new_data_query =paste0(temp_token_format,new_data)
temp_queryresult = POST("https://imdifakta.azurewebsites.net/api/v1/data/query",body=new_data_query,encode="json",verbose(),content_type_json())
temp_df = fromJSON(content(temp_queryresult,"text",encoding="UTF-8"))
if(length(temp_df)>1){
temp_df_final = bind_rows(temp_df_final,temp_df[[2]])
Sys.sleep(5) #høfflig å ikke spørre for mange ganger på kort tid, derfor sleep 5 sek.
}
if(length(temp_df)==1){
temp_df_final = bind_rows(temp_df_final,temp_df[[1]])
print(paste0("Fullført på ",i," repetisjoner"))
}
}
return(temp_df_final)
}
url = "https://imdifakta.azurewebsites.net/api/v1/data/compare"
data =
'{"TableName":"befolkning_hovedgruppe",
"Conditions":
{"innvkat5":["innvandrere","bef_u_innv_og_norskf","norskfodte_m_innvf"],
"kjonn":["alle"],
"enhet":["personer"]
},
"Compare": {
"kommuneNr": ["0101"],
"fylkeNr": ["00"]
}
}'
#ma ha med content_type_json() for a fa 200 ok
test = POST(url,body=data,encode="json",verbose(),content_type_json())
df = fromJSON(content(test,"text",encoding="UTF-8"))[[1]]
head(df)
test = imdi_fetch_table()
View(test)
df = filter(test,enhet=="personer")%>%
mutate(.,tall = as.numeric(tabellvariabel))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))
View(df)
df = filter(test,enhet=="personer")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
library(ggplot2)
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
df = filter(test,enhet=="personer")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=FALSE))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
df = filter(test,enhet=="personer")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
levels(as.factor(test$kommuneNr))
df = filter(test,enhet=="personer",kommuneNr!="0000")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
theme_set(theme_minimal())
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
?na_if
df = filter(test,enhet=="personer",kommuneNr!="0000")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))%>%
mutate(.,antall = na_if(antall,0))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
df = filter(test,enhet == "personer", bosetting == "vedtak")
df = filter(test,enhet == "personer", bosetting == "vedtak")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=1)+
geom_boxplot(alpha=1)
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=1)+
geom_boxplot(alpha=1)+
coord_flip()
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=1)+
coord_flip()
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
df = filter(test,enhet=="personer",kommuneNr!="0000")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))%>%
group_by(.,aar,bosetting)%>%
summarise(.,antall = sum(tall,na.rm=TRUE))%>%
mutate(.,antall = na_if(antall,0))
ggplot(data=df)+
geom_line(aes(x=aar,y=antall,colour=bosetting))
df = filter(test,enhet == "personer", bosetting == "vedtak")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
df = filter(test,enhet == "personer", bosetting == "vedtak")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
df = filter(test,enhet == "personer", bosetting == "vedtak")%>%
mutate(.,tall = as.numeric(tabellvariabel),aar=as.numeric(aar))
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
theme_set(theme_minimal())
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
ggplot(data = df, aes(x= kommuneNr, y = tall))+
geom_jitter(colour = "steelblue", alpha=0.3)+
geom_boxplot(alpha=0)+
coord_flip()
library(here)
df = read.csv2(here("content/data/tippeliga_2019.csv"))
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE)
View(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "")
?read.csv
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 17)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)
kable(df)
library(knitr)
kable(df)
suppressPackageStartupMessages(library(tidyverse))
temp = gather(df,kilde,plassering,NordicBet:Oddschecker)
ggplot(data = temp, aes(x=kilde, y = lag, fill = plassering))+
geom_tile()
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(lag), fill = plassering))+
geom_tile()
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(lag)))+
geom_tile(aes(fill = plassering))
?geom_tile
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(lag)))+
geom_tile(aes(fill = plassering))
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(Lag)))+
geom_tile(aes(fill = plassering))
blogdown:::serve_site()
blogdown:::serve_site()
#biblioteker
library(here)
library(knitr)
suppressPackageStartupMessages(library(tidyverse))
#data
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag)
kable(df)
temp = gather(df,kilde,plassering,NordicBet:Aftenposten)
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(Lag)))+
geom_tile(aes(fill = plassering))
?rowwise
df$sluttplassering_gjennomsnitt = apply(df,1,mean)
df$sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean)
View(df)
apply(select(df,-Lag),1,mean)
apply(select(df,-Lag),1,mean, na.rm=TRUE)
df$sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)
df = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE))
df = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(df,1,mean, na.rm=TRUE))
#data
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag)
temp = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(df,1,mean, na.rm=TRUE))
temp = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE))
View(temp)
temp = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(sluttplassering_gjennomsnitt)
#eksperiment med en heatmap-table
temp = gather(temp,kilde,plassering,Nettavisen:Aftenposten)
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(Lag)))+
geom_tile(aes(fill = plassering))
temp = select(df, -UniBet, - NordicBet)%>%
mutate(sluttplassering_gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(sluttplassering_gjennomsnitt)
#eksperiment med en heatmap-table
temp = gather(temp,kilde,plassering,Nettavisen:sluttplassering_gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(Lag)))+
geom_tile(aes(fill = plassering))
temp = select(df, -UniBet, - NordicBet)%>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(gjennomsnitt)
#eksperiment med en heatmap-table
temp = gather(temp,kilde,plassering,Nettavisen:gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = as.factor(Lag)))+
geom_tile(aes(fill = plassering))
View(df)
#biblioteker
library(here)
library(knitr)
suppressPackageStartupMessages(library(tidyverse))
#data
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag)
?fct_reorder
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering)))+
geom_tile(aes(fill = plassering))
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .desc = TRUE)))+
geom_tile(aes(fill = plassering))
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag")
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "")
?scale_fill_gradient
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag) %>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(gjennomsnitt)
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag) %>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = round(apply(select(df,-Lag),1,mean, na.rm=TRUE), 1)) %>%
arrange(gjennomsnitt)
#eksperiment med en heatmap-table
temp = gather(df,kilde,plassering,Nettavisen:gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag) %>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
mutate(gjennomsnitt = round(gjennomsnitt,1)) %>%
arrange(gjennomsnitt)
kable(df)
?round
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
arrange(.,Lag) %>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(gjennomsnitt)
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
select(-UniBet, - NordicBet)
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE))
kable(df)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = apply(select(df,-Lag),1,mean, na.rm=TRUE)) %>%
arrange(gjennomsnitt)
kable(df)
#eksperiment med en heatmap-table
temp = gather(df,kilde,plassering,Nettavisen:gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradien2(low = "green", mid = "white", high = "red")
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "green", mid = "white", high = "red")
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "green", mid = "white", high = "red", midpoint = 8)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "blue", mid = "white", high = "orange", midpoint = 8)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "steelblue", mid = "white", high = "orange", midpoint = 8)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "steelblue", mid = "grey", high = "orange", midpoint = 8)
7.2/5
colMeans()
?colMeans
#biblioteker
library(here)
library(knitr)
suppressPackageStartupMessages(library(tidyverse))
#data
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)%>%
select(-UniBet, - NordicBet) %>%
mutate(gjennomsnitt = rowMeans(select(df,-Lag),na.rm=TRUE)) %>%
arrange(gjennomsnitt)
kable(df)
#eksperiment med en heatmap-table
temp = gather(df,kilde,plassering,Nettavisen:gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "steelblue", mid = "grey", high = "orange", midpoint = 8)
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16) %>%
select(., -UniBet, - NordicBet) %>%
mutate(gjennomsnitt = rowMeans(df,na.rm=TRUE)) %>%
arrange(gjennomsnitt)
names(df)[2:7]
numeric_vars = names(df)[2:7]
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16)
numeric_vars = names(df)[2:6]
df = read.csv2(here("content/data/tippeliga_2019.csv"),stringsAsFactors = FALSE, na.strings = "", nrows = 16) %>%
select(., -UniBet, - NordicBet)
numeric_vars = names(df)[2:6]
df = mutate(gjennomsnitt = rowMeans(select(.,numeric_vars),na.rm=TRUE)) %>%
arrange(gjennomsnitt)
df = mutate(gjennomsnitt = rowMeans(select(df,numeric_vars),na.rm=TRUE)) %>%
arrange(gjennomsnitt)
df = mutate(df, gjennomsnitt = rowMeans(select(.,numeric_vars),na.rm=TRUE)) %>%
arrange(gjennomsnitt)
df = mutate(df, gjennomsnitt = rowMeans(select(df,numeric_vars),na.rm=TRUE)) %>%
arrange(gjennomsnitt)
kable(df)
ggplot(data = temp, aes(x = Lag, y = plassering)) +
# add jittered points with alpha of 0.3 and color 'steelblue'
geom_jitter(color="steelblue",alpha=0.3) +
# make boxplot transparent with alpha = 0
geom_boxplot(alpha=0) +
labs(title = 'Speed of red cars by gender of driver')
?geom_jitter
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE), y = plassering)) +
# add jittered points with alpha of 0.3 and color 'steelblue'
geom_jitter(color="steelblue",alpha=0.3) +
# make boxplot transparent with alpha = 0
geom_boxplot(alpha=0) +
labs(title = 'Speed of red cars by gender of driver')
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
# add jittered points with alpha of 0.3 and color 'steelblue'
geom_jitter(color="steelblue",alpha=0.3) +
# make boxplot transparent with alpha = 0
geom_boxplot(alpha=0) +
labs(title = 'Speed of red cars by gender of driver')
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn")
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
theme(axis.text.x = element_text(angle=90))
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
#geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
theme(axis.text.x = element_text(angle=90))
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = FALSE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
theme(axis.text.x = element_text(angle=90))
ggplot(data = temp, aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
theme(axis.text.x = element_text(angle=90))
ggplot(data = filter(temp, kilde != "gjennomsnitt"), aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
theme(axis.text.x = element_text(angle=90))
ggplot(data = filter(temp, kilde != "gjennomsnitt"), aes(x = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE), y = plassering)) +
#her bruker vi et boksplot for å vise variasjonen i plasseringer for hvert enkelt lag, men gjør det gjennomsiktig
geom_boxplot(alpha=0) +
#det er heller ikke flere punkter for hvert enkelt lag enn at en kan vise alle.
geom_jitter(color="steelblue",alpha=0.3) +
labs(x = "Lag", y = "Plassering", title = "Stor variasjon i tips for lag midt på tabellen", subtitle = "Større enighet om topp og bunn") +
coord_flip()
theme(axis.text.x = element_text(angle=90))
#eksperiment med en heatmap-table
temp = gather(df,kilde,plassering,Nettavisen:gjennomsnitt)
ggplot(data = temp, aes(x=as.factor(kilde), y = fct_reorder(as.factor(Lag), plassering, .fun = mean, .desc = TRUE)))+
geom_tile(aes(fill = plassering))+
labs(x = "Kilde", y = "Lag", title = "Molde og Rosenborg i topp, Mjøndalen og Viking i bunn")+
scale_fill_gradient2(low = "steelblue", mid = "grey", high = "orange", midpoint = 8)
